---
title: "Forecasting interrupted time series"
author:
- familyname: Rostami-Tabar
  othernames: Bahman
  address:
    - Cardiff Business School
    - Wales CF10 3EU
    - United Kingdom
  email: rostami-tabarb@cardiff.ac.uk
  correspondingauthor: true
- familyname: Hyndman
  othernames: Rob J
  address:
    - Department of Econometrics & Business Statistics
    - Clayton VIC 3800
    - Australia
  email: Rob.Hyndman@monash.edu
abstract: "A brief summary of our ideas"
keywords: "blah, blah"
wpnumber: no/yr
jelcodes: C10,C14,C22
blind: false
cover: false
toc: false
bibliography: references.bib
biblio-style: authoryear-comp
format: 
  wp-pdf:
    include-in-header: header.tex
cite-method: biblatex
number-sections: true
keep-tex: true
fig-height: 5
fig-width: 8
execute:
  echo: false
  warning: false
  message: false
  cache: false
---

```{r}
#| label: load
#| cache: false
#| eval: true
# Load all required packages
library(targets)
library(fpp3)

# Set ggplot colours and fonts
options(
  ggplot2.continuous.colour = "viridis",
  ggplot2.continuous.fill = "viridis",
  ggplot2.discrete.colour = c("#D55E00", "#0072B2", "#009E73", "#CC79A7", "#E69F00", "#56B4E9", "#F0E442"),
  ggplot2.discrete.fill = c("#D55E00", "#0072B2", "#009E73", "#CC79A7", "#E69F00", "#56B4E9", "#F0E442")
)
#theme_set(theme_get() + theme(text = element_text(family = "Fira Sans")))

# Load main data objects from targets folder
tar_config_set(store = here::here("_targets"))
tar_load(c(austa))
```

# Introduction

Time series are sometimes interrupted by unusual events; for example, a natural disaster may occur, or a there may be a temporary policy change. Many forecasters have faced this issue recently with the COVID-19 pandemic, where historical patterns may have been severely disrupted due to lockdowns and other restrictions. In this paper, we consider the problem of forecasting after such an event has occurred.

This is a different problem from change point detection. In the situations we consider, we know that a change has occurred, and we want to forecast the future after the change. Change point detection is about identifying when a change has occurred.

The changes in the series as a result of the disruption may be relatively simple, for example a left shift at the start of the disruption, and another at the end of the disruption. Or they may be more complex, with changes to the seasonal patterns, and changes to the level, which evolve over time. In this paper, we consider a range of models that can be used to handle such changes, and compare their performance on some real data sets.

Time series models usually assume that the future is similar to the past, at least in how the data evolve. But a big event like covid makes the future different from the past, at least in the short term.

# Handling interruptions when forecasting

We consider several possible ways to handle interruptions when forecasting.

## Use a highly adaptive model

Highly adaptive models can adjust to the interruption as it is happening, and will therefore be able to approximate the data generating process relatively well. For example, an ETS model with large smoothing parameters will be able to adjust to the interruption relatively quickly. This has the advantage of being a very simple solution that is easy to implement and fast to compute.

However, the prediction intervals will be large, because the model will have heavily discounted past data. In fact, the model will largely forget the past data other than the most recent observations, so there is no memory of the seasonal patterns and other dynamics that were present before the interruption. Consequently, the approach works best if there is no assumption that the post-interruption period will be similar to the pre-interruption period.

## Use a dynamic regression model with intervention covariates

A dynamic regression model with intervention covariates can be used to model the interruption explicitly. For example, if the intervention involves a simple level shift, with a reverse level shift at the end of the intervention, we can use a dummy variable to indicate the interruption period, and allow the model to adjust to the interruption. More complicated interventions can be handled by using more covariates.

This has the advantage of retaining the memory of the past, and so the seasonal patterns and other dynamics will be retained. However, the model will assume that the post-interruption period will be similar to the pre-interruption period, and so the prediction intervals may be be too narrow.

Advantages: retains full memory of the past, and allows the change period to be effectively modelled provided you choose the covariates well.

Disadvantages: requires a lot of thought to choose the covariates well. Assumes that the post-pandemic period will be similar to the pre-pandemic period.

## Treat the covid period as missing and use a model that handles missing values

Many time series models will handle periods of missing values. So the problematic observations that occur during the period of disruption can be set to missing, and the model should continue to produce forecasts as if the interruption had not occurred. Of course, the forecasts will not be accurate for the period of disruption, but they can be interpreted as "what might have been". This solution requires a judgement to be made about when the disruption has begun, and when normality resumes.

Because no information is retained during the disruption, the prediction intervals will become large during the disruption, and after the disruption they will remain large until the model has enough data to estimate the forecast distribution more accurately.

## Estimate what might have been and adjust the data

A fourth solution is to estimate what might have been during the period of disruption, and then use the adjusted data to fit a model. The estimates could be made using any convenient method. One approach would be to set the estimates to equal the forecasts made using only pre-interruption data. This then becomes almost equal to the previous solution except that the prediction intervals will be narrower because the estimation uncertainty has not been taken into account.

# Examples

Let's consider some examples

## Australian tourism

The Australian tourism data set is a monthly time series showing the number of short-term overseas visitors to Australia. The data [@tourismdata] are available from January 2000 to May 2023, and are shown in @fig-tourism_plot1. As the borders closed in March 2020, the number of visitors to Australia dropped to near zero, and remained there until towards the end of 2021. The borders officially reopened on 21 February 2022, although it seems visitors began to arrive earlier than that.


```{r}
#| label: fig-tourism_plot1
#| fig-cap: "Short-term visitor arrivals to Australia (monthly): Jan 2000 -- May 2023."
#| fig-height: 3
tar_read(tourism_plot1)
```

We apply the four solutions discussed in the previous section to these data, making 12 month forecasts at the end of each year from 2019 to 2022. We fit ETS, ARIMA and dynamic ARIMA models to the data [@fpp3], first applying a log transformation to ensure the resulting forecasts are positive. This is possible, because the observations never reach exactly zero, with the smallest number of visitors per month equal to `r min(austa$Visitors)*1000` in `r austa |> filter(Visitors == min(Visitors)) |> pull(Month) |> format("%B %Y")`. For all forecasts, we also show 90% prediction intervals.


```{r}
#| label: fig-tsol1_plot
#| fig-height: 8
#| fig-pos: "t"
#| fig-cap: Solution 1. This should show that ETS is highly adaptive. However, for some reason, that is no longer the case, and I don't know why.
tar_read(tsol1_plot)
```


In @fig-tsol1_plot, we show forecasts by applying ETS and ARIMA models to the data. ETS, in particular, is well-known to be relatively adaptive to changes in the series, and this is evident in these forecasts. The forecasts for 2020 were made using data before COVID-19 had any affect, and so they show similar patterns to the past. The forecasts for 2021 were made after 9 months of very low levels of arrivals, and both models show forecasts consistent with the recent history. The use of logarithms is particularly important here as the variance is much smaller during 2020 than previously, but after taking logarithms, the variance is more stable over time. The forecasts made at the start of 2022 have struggled to detect the small increase in traffic at the end of 2021, and both models have forecast relatively flat trajectories as a result, although the prediction intervals are wide indicating model uncertainty. Finally, the forecasts made at the end of 2022 have captured the increasing trend, but ETS is much closer to the reality, adapting more quickly to the changing patterns. Again, the wide prediction intervals indicate a high level of uncertainty. It is possible to make ETS more adaptive to changes in the data by increasing the value of the smoothing parameters. For example, a high value of $\beta$ (the smoothing parameter for the slope), will result in changes of trend being incorporated into the forecasts more quickly, at the risk of over-reacting to noise in the data.

```{r}
#| label: fig-tsol2_plot
#| fig-height: 8
#| fig-pos: "t"
#| fig-cap: Solution 2. We use a left shift from March 2020 to October 2022, and a ramp from October 2021 to October 2022. After October 2022, there are no non-zero predictors.
tar_read(tsol2_plot)
```

@fig-tsol2_plot shows forecasts obtained using a dynamic regression model (i.e., a regression with ARIMA errors) using two intervention variables: a level shift from March 2022 to November 2022, and a ramp from October 2021 to November 2022. It is evident that the level shift variable has worked well, giving relatively good forecasts for 2021. However, the forecasts for 2022 are particularly poor, because the ramp slope has been greatly overestimated, as it was based on only three observations (Oct -- Dec 2021). The forecasts for 2023 are much better, and the relatively large prediction intervals are appropriate given the uncertainty in the industry at the end of 2022.


```{r}
#| label: fig-tsol3_plot
#| fig-height: 8
#| fig-pos: "t"
#| fig-cap: Solution 3. The period from March 2020 to October 2022 is set to missing. So the first three years of forecasts show what might have been. The fourth set of forecasts uses observations from November and December 2022, and so the forecasts have been adjusted downwards.
tar_read(tsol3_plot)
```

The third solution involved setting the observations during the disruption period to missing, and then fitting an ARIMA model to the series. Consequently, the first three years of forecasts show what might have been without the COVID-19 pandemic, based on the history to the end of 2019. The final forecasts for 2023 use the data to the end of 2019, and the two observations in November and December 2022. These are much better, but the prediction intervals are too narrow, as there hasn't been sufficient recent data.


```{r}
#| label: fig-tsol4_plot
#| fig-height: 8
#| fig-pos: "t"
#| fig-cap: Solution 4. We replace the observations from March 2020 to October 2022 with the average of the same month in the three years prior to March 2020.
tar_read(tsol4_plot)
```

Finally, we show in @fig-tsol4_plot the forecasts obtained using solution 4. Here we have replaced observations between March 2020 and October 2022 with estimates based on the average of the same month in the three years prior to March 2020. The resulting forecasts are similar to those from solution 3, but with narrower prediction intervals because the model is (falsely) assuming that the "observations" during the disruption are real.


\FloatBarrier

## Example: Ambulance attendances


```{r}
#| label: plot-data
tar_read(attended_plot)
tar_read(stl_plot)
```

```{r}
tar_load(fit)
fit |> filter(Area == "BC") |> select(ets) |> components() |> autoplot()
```

```{r}
#| label: forecast
tar_load(fc)
tar_load(df)
fc |> filter(Area == "BC", .model=="ets") |> autoplot(df)
fc |> filter(Area == "BC", .model=="stl_ets") |> autoplot(df)
fc |> filter(Area == "BC", .model=="arima") |> autoplot(df)
```
